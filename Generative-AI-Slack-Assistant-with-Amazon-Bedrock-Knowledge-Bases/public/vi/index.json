[
{
	"uri": "//localhost:1313/vi/4-security/4.1-secret_manager/",
	"title": "Cấu hình AWS Secrets Manager",
	"tags": [],
	"description": "",
	"content": "AWS Secrets Manager lưu trữ và quản lý an toàn thông tin đăng nhập Slack bot với mã hóa at rest và khả năng rotation tự động.\nTruy cập Secrets Manager Console Điều hướng đến AWS Secrets Manager Console Chuẩn bị Slack Credentials Sao chép Bot User OAuth Token từ Slack (từ Module 3.3): Tạo Bot Token Secret Tạo secret mới cho bot-token:\nNhấp Store a new secret Chọn Other type of secret Nhập key-value pair: SLACK_BOT_TOKEN = giá-trị-bot-token-của-bạn Tên: bot-token5 Tạo thành công Lưu ARN Lấy Signing Secret Sao chép Signing Secret từ cài đặt Slack app: Tạo Signing Secret Tạo secret mới cho signing-secret:\nNhấp Store a new secret Chọn Other type of secret Nhập key-value pair: SLACK_SIGNING_SECRET = giá-trị-signing-secret-của-bạn Tên: signing-secret5 Tạo thành công Lưu ARN Mẹo: Giữ tên secret nhất quán (bot-token5 và signing-secret5) vì chúng sẽ được tham chiếu trong cấu hình Parameter Store.\nTiếp theo là gì Slack credentials của bạn hiện đã được lưu trữ an toàn trong AWS Secrets Manager. Tiếp theo, chúng ta sẽ cấu hình Parameter Store để cho phép truy cập runtime đến các secrets này.\nTiếp tục đến: 4.2 Cấu hình Systems Manager Parameter Store\n"
},
{
	"uri": "//localhost:1313/vi/1-introduction/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Giới thiệu về Trợ lý Slackbot với Amazon Bedrock Chào mừng bạn đến với workshop toàn diện về xây dựng Trợ lý Slack AI Tạo sinh với Amazon Bedrock Knowledge Bases! Trong trải nghiệm thực hành này, bạn sẽ học cách tạo ra một trợ lý AI thông minh giúp biến đổi cách tổ chức của bạn truy cập và sử dụng kiến thức, làm cho thông tin có thể truy cập ngay lập tức thông qua các cuộc trò chuyện bằng ngôn ngữ tự nhiên trong Slack.\nThách thức chúng ta đang giải quyết Các tổ chức hiện đại đối mặt với một thách thức năng suất quan trọng: các silo thông tin. Kiến thức có giá trị bị phân tán trên các tài liệu, wiki, chính sách và cơ sở dữ liệu, khiến nhân viên khó tìm được câu trả lời nhanh chóng. Các phương pháp tìm kiếm truyền thống thường không hiểu được ngữ cảnh và ý định, dẫn đến:\nLãng phí thời gian tìm kiếm qua nhiều tài liệu Câu trả lời không nhất quán từ các thành viên khác nhau trong nhóm Khoảng trống kiến thức khi các chuyên gia không có mặt Giảm năng suất do ma sát thông tin Phương pháp giải pháp của chúng ta Workshop này trình bày cách biến đổi kiến thức tổ chức tĩnh thành một trợ lý thông minh, có thể trò chuyện tích hợp liền mạch với quy trình làm việc hiện có thông qua Slack.\nMục tiêu Workshop Bằng cách hoàn thành workshop này, bạn sẽ đạt được các kết quả học tập sau:\nMục tiêu chính Thành thạo Kiến trúc RAG\nHiểu các nguyên tắc Retrieval-Augmented Generation Triển khai tìm kiếm ngữ nghĩa dựa trên vector Thiết kế pipeline ingestion tài liệu hiệu quả Xây dựng Hệ thống AI sẵn sàng cho Production\nTriển khai kiến trúc serverless có thể mở rộng Triển khai xử lý lỗi và giám sát phù hợp Cấu hình auto-scaling và tối ưu hóa chi phí Tích hợp Bảo mật Doanh nghiệp\nCấu hình Amazon Bedrock Guardrails Triển khai phát hiện và ẩn danh hóa PII Thiết lập lọc nội dung và các biện pháp an toàn Phát triển Ứng dụng Slack Bot\nSử dụng framework Slack Bolt cho Python Xử lý xử lý tin nhắn bất đồng bộ Triển khai xác thực và quyền phù hợp Kỹ năng Kỹ thuật bạn sẽ có được Tích hợp Amazon Bedrock và quản lý model Các thao tác cơ sở dữ liệu vector OpenSearch Serverless Phát triển hàm serverless AWS Lambda Cấu hình REST API API Gateway Infrastructure as Code sử dụng AWS CDK Phát triển Slack API và xử lý webhook Kiến trúc SlackBot Sơ đồ Luồng Kiến trúc graph TB\rA[Người dùng Slack] --\u0026gt;|lệnh /ask-ai| B[API Gateway]\rB --\u0026gt; C[Lambda Function]\rC --\u0026gt; D[Bedrock Knowledge Base]\rD --\u0026gt; E[OpenSearch Serverless]\rD --\u0026gt; F[Claude 3 Sonnet]\rG[Tài liệu S3] --\u0026gt;|Ingestion| D\rF --\u0026gt; H[Bedrock Guardrails]\rH --\u0026gt;|Phản hồi đã lọc| I[Kênh Slack]\rstyle A fill:#e1f5fe\rstyle D fill:#f3e5f5\rstyle F fill:#fff3e0\rstyle H fill:#ffebee Giải thích các Thành phần Chính Thành phần Mục đích Lợi ích Giao diện Slack Lớp tương tác người dùng Giao diện quen thuộc, không cần đào tạo API Gateway Quản lý endpoint HTTP Truy cập API an toàn, có thể mở rộng Lambda Function Xử lý logic nghiệp vụ Serverless, tính toán hiệu quả chi phí Bedrock Knowledge Base Điều phối RAG Được quản lý hoàn toàn, không cơ sở hạ tầng OpenSearch Serverless Lưu trữ vector và tìm kiếm Auto-scaling, tìm kiếm ngữ nghĩa Bedrock Guardrails An toàn nội dung và lọc Bảo mật cấp doanh nghiệp Những gì bạn sẽ xây dựng 1. Trợ lý Slack Thông minh\nXử lý Ngôn ngữ Tự nhiên: Đặt câu hỏi bằng tiếng Anh đơn giản Phản hồi Theo ngữ cảnh: Câu trả lời được hỗ trợ bởi AI với trích dẫn nguồn Tìm kiếm Đa tài liệu: Truy vấn trên toàn bộ cơ sở kiến thức của bạn Xử lý Thời gian thực: Xác nhận phản hồi dưới 3 giây 2. Tính năng Bảo mật Doanh nghiệp\nLọc Nội dung: Chặn nội dung không phù hợp hoặc có hại Bảo vệ PII: Phát hiện và ẩn danh hóa tự động Phòng thủ Prompt Injection: Ngăn chặn thao tác prompt độc hại Kiểm soát Truy cập: Quyền dựa trên workspace 3. Cơ sở hạ tầng Sẵn sàng Production\nAuto-Scaling: Xử lý khối lượng công việc thay đổi tự động Giám sát: Tích hợp CloudWatch cho khả năng quan sát Xử lý Lỗi: Degradation nhẹ nhàng và phản hồi người dùng Tối ưu hóa Chi phí: Mô hình serverless trả theo sử dụng Ứng dụng Thực tế Mẫu giải pháp này cho phép nhiều trường hợp sử dụng doanh nghiệp:\n1. Hỗ trợ Khách hàng\nCâu trả lời tức thì từ tài liệu sản phẩm Phản hồi nhất quán trên các nhóm hỗ trợ Giảm khối lượng ticket và thời gian phản hồi 2. Nhân sự\nTự phục vụ nhân viên cho câu hỏi chính sách Hỗ trợ onboarding và tài liệu đào tạo Làm rõ quyền lợi và thủ tục 3. Tài liệu Kỹ thuật\nTruy cập cơ sở kiến thức kỹ thuật Tài liệu API và hướng dẫn khắc phục sự cố Thực hành tốt nhất và tiêu chuẩn coding 4. Tuân thủ \u0026amp; Pháp lý\nTruy vấn yêu cầu quy định Giải thích và hướng dẫn chính sách Chuẩn bị kiểm toán và tài liệu Tìm hiểu sâu về Technology Stack 1. Hệ sinh thái Amazon Bedrock\nFoundation Models: Claude 3 Sonnet cho tạo văn bản Embeddings: Titan Text Embeddings V2 cho tạo vector Knowledge Bases: Điều phối workflow RAG được quản lý Guardrails: Cơ chế an toàn và lọc nội dung 2. Dịch vụ AWS Hỗ trợ\nLambda: Tính toán serverless theo sự kiện API Gateway: Quản lý API RESTful S3: Lưu trữ và phiên bản tài liệu OpenSearch Serverless: Thao tác cơ sở dữ liệu vector CloudWatch: Logging, giám sát và cảnh báo Secrets Manager: Lưu trữ thông tin đăng nhập an toàn 3. Framework Phát triển\nSlack Bolt for Python: Phát triển bot đơn giản hóa AWS CDK: Triển khai Infrastructure as Code Python 3.12+: Tính năng ngôn ngữ hiện đại và hiệu suất Lộ trình Học tập Workshop graph LR\rA[Thiết lập \u0026amp; Điều kiện tiên quyết] --\u0026gt; B[Nền tảng Knowledge Base]\rB --\u0026gt; C[Tích hợp Bedrock]\rC --\u0026gt; D[Phát triển Slack Bot]\rD --\u0026gt; E[Bảo mật \u0026amp; Guardrails]\rE --\u0026gt; F[Triển khai Production]\rF --\u0026gt; G[Kiểm thử \u0026amp; Xác thực] Chỉ số Thành công Sau khi hoàn thành workshop, bạn sẽ đạt được:\n1. Deliverables Chức năng\nSlack bot hoạt động phản hồi các truy vấn ngôn ngữ tự nhiên Cơ sở hạ tầng AWS được triển khai với bảo mật phù hợp Knowledge base tích hợp với tài liệu của bạn Cấu hình giám sát và cảnh báo 2. Kết quả Có thể đo lường\nThời gian Phản hồi: \u0026lt; 3 giây cho xác nhận truy vấn Độ chính xác: Câu trả lời liên quan với ghi nhận nguồn Bảo mật: Không có nội dung không phù hợp trong phản hồi Khả năng mở rộng: Xử lý 100+ người dùng đồng thời 3. Chuyển giao Kiến thức\nHiểu các nguyên tắc kiến trúc RAG Kinh nghiệm thực hành với dịch vụ Amazon Bedrock Thực hành tốt nhất triển khai production Triển khai bảo mật AI doanh nghiệp Các bước tiếp theo Bây giờ bạn đã hiểu các mục tiêu và kiến trúc của workshop, bạn đã sẵn sàng bắt đầu triển khai thực hành. Hành trình phía trước sẽ biến đổi bạn từ một chuyên gia tò mò về AI thành người có khả năng triển khai các giải pháp AI tạo sinh cấp production.\nHãy bắt đầu xây dựng tương lai của năng suất nơi làm việc!\nTiếp tục đến: Thiết lập Môi trường\n"
},
{
	"uri": "//localhost:1313/vi/5-opensearch/5.1-collection/",
	"title": "OpenSearch Serverless Collection",
	"tags": [],
	"description": "",
	"content": "Tạo OpenSearch Serverless Collection Phần này hướng dẫn bạn tạo OpenSearch Serverless collection để lưu trữ vector, bao gồm các access và network policies cần thiết.\nTruy cập OpenSearch Console Điều hướng đến Amazon OpenSearch Service Console Tạo Data Access Policy Cuộn xuống và chọn Data access policies → Create access policy Nhập Access policy name → Chọn JSON Nhập JSON policy sau và nhấp Create:\n[ { \u0026#34;Rules\u0026#34;: [ { \u0026#34;ResourceType\u0026#34;: \u0026#34;index\u0026#34;, \u0026#34;Resource\u0026#34;: [\u0026#34;index/slack-bedrock-vector-db/*\u0026#34;], \u0026#34;Permission\u0026#34;: [\u0026#34;aoss:*\u0026#34;] }, { \u0026#34;ResourceType\u0026#34;: \u0026#34;collection\u0026#34;, \u0026#34;Resource\u0026#34;: [\u0026#34;collection/slack-bedrock-vector-db\u0026#34;], \u0026#34;Permission\u0026#34;: [\u0026#34;aoss:*\u0026#34;] } ], \u0026#34;Principal\u0026#34;: [\u0026#34;arn:aws:iam::\u0026lt;YOUR-ACCOUNT-ID\u0026gt;:root\u0026#34;] } ] Quan trọng: Thay thế \u0026lt;YOUR-ACCOUNT-ID\u0026gt; bằng AWS account ID thực tế của bạn.\nTạo Network Policy Tạo Network policy → Create network policy Nhập Network policy name -\u0026gt; chọn JSON Nhập JSON policy sau và nhấp Create:\n[ { \u0026#34;Rules\u0026#34;: [ { \u0026#34;ResourceType\u0026#34;: \u0026#34;collection\u0026#34;, \u0026#34;Resource\u0026#34;: [\u0026#34;collection/slack-bedrock-vector-db\u0026#34;] }, { \u0026#34;ResourceType\u0026#34;: \u0026#34;dashboard\u0026#34;, \u0026#34;Resource\u0026#34;: [\u0026#34;collection/slack-bedrock-vector-db\u0026#34;] } ], \u0026#34;AllowFromPublic\u0026#34;: true } ] Tạo Vector Collection Tạo collection:\nChọn Collections Chọn Create Collection Cấu hình collection settings:\nCollection name: slack-bedrock-vector-db5 Collection type: Vector search Security: Standard create Sử dụng cài đặt mặc định và nhấp Create\nGhi chú Thông tin Quan trọng Lưu các chi tiết sau cho cấu hình sau này:\nCollection ARN: arn:aws:aoss:us-east-1:account:collection/collection-id OpenSearch Endpoint: https://collection-id.us-east-1.aoss.amazonaws.com Bước tiếp theo là tạo index table. Mẹo: Sao chép và lưu Collection ARN và OpenSearch Endpoint vì chúng sẽ cần thiết cho cấu hình Bedrock Knowledge Base.\nTiếp theo là gì OpenSearch Serverless collection của bạn hiện đã sẵn sàng để lưu trữ vector embeddings. Tiếp theo, chúng ta sẽ tạo vector index để tìm kiếm similarity hiệu quả.\nTiếp tục đến: 5.2 - Tạo Vector Index\n"
},
{
	"uri": "//localhost:1313/vi/7-lambda_implementation/7.1-lambda_role/",
	"title": "Tạo Lambda Execution Role",
	"tags": [],
	"description": "",
	"content": "Phần này hướng dẫn bạn tạo IAM role với các quyền cần thiết cho Lambda function tương tác với Bedrock, Secrets Manager và các AWS services khác.\nTạo IAM Role Tạo Base Role\nTạo IAM role mới tên BedrockExecutionRole8888:\nTrusted entity: AWS Lambda Use case: Lambda Attach AWSLambdaBasicExecutionRole managed policy Thêm Custom Policy Tạo BedrockExecutionPolicy\nThêm custom inline policy tên BedrockExecutionPolicy:\nCấu hình Policy JSON\nSử dụng JSON policy sau (thay thế placeholder values bằng ARNs thực tế của bạn):\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Action\u0026#34;: [\u0026#34;bedrock:InvokeModel\u0026#34;], \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0\u0026#34; }, { \u0026#34;Action\u0026#34;: [\u0026#34;bedrock:Retrieve\u0026#34;, \u0026#34;bedrock:RetrieveAndGenerate\u0026#34;], \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:bedrock:us-east-1:YOUR-ACCOUNT-ID:knowledge-base/YOUR-KB-ID\u0026#34; }, { \u0026#34;Action\u0026#34;: [\u0026#34;ssm:GetParameter\u0026#34;], \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:ssm:us-east-1:YOUR-ACCOUNT-ID:parameter/slack-bot/token\u0026#34;, \u0026#34;arn:aws:ssm:us-east-1:YOUR-ACCOUNT-ID:parameter/slack-bot/signing-secret\u0026#34; ] }, { \u0026#34;Action\u0026#34;: [\u0026#34;lambda:InvokeFunction\u0026#34;], \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:us-east-1:YOUR-ACCOUNT-ID:function:slack-bedrock-bot\u0026#34; }, { \u0026#34;Action\u0026#34;: [\u0026#34;bedrock:ApplyGuardrail\u0026#34;], \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:bedrock:us-east-1:YOUR-ACCOUNT-ID:guardrail/*\u0026#34; }, { \u0026#34;Action\u0026#34;: [\u0026#34;secretsmanager:GetSecretValue\u0026#34;], \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:secretsmanager:us-east-1:YOUR-ACCOUNT-ID:secret:bot-token5-*\u0026#34;, \u0026#34;arn:aws:secretsmanager:us-east-1:YOUR-ACCOUNT-ID:secret:signing-secret5-*\u0026#34; ] } ] } Giải thích Policy Permissions 1. Core Permissions\nPermission Mục đích Resource bedrock:InvokeModel Gọi Claude 3 Sonnet Foundation model ARN bedrock:Retrieve Query Knowledge Base Knowledge Base ARN bedrock:RetrieveAndGenerate Full RAG workflow Knowledge Base ARN ssm:GetParameter Truy cập configuration Parameter Store ARNs lambda:InvokeFunction Self-invocation Lambda function ARN bedrock:ApplyGuardrail Content filtering Guardrail ARNs secretsmanager:GetSecretValue Truy cập Slack credentials Secrets Manager ARNs 2. Required Replacements\nTrước khi sử dụng policy, thay thế các placeholders này:\nYOUR-ACCOUNT-ID: AWS account ID của bạn YOUR-KB-ID: Knowledge Base ID của bạn từ Module 6 Cập nhật secret ARNs để khớp với tên secret thực tế của bạn Quan trọng: Thay thế tất cả placeholder values bằng ARNs thực tế của bạn trước khi tạo policy. ARNs không chính xác sẽ gây ra permission errors.\nTiếp theo là gì Lambda execution role của bạn hiện đã được cấu hình với các quyền cần thiết. Tiếp theo, chúng ta sẽ tạo Lambda function sẽ sử dụng role này.\nTiếp tục đến: 7.2 Tạo và Cấu hình Lambda Function\n"
},
{
	"uri": "//localhost:1313/vi/3-slack_app/3.1-create_slack_app/",
	"title": "Tạo slack app",
	"tags": [],
	"description": "",
	"content": "Điều hướng đến Slack API Truy cập api.slack.com/apps và nhấp Create New App → From scratch Cấu hình Chi tiết App Điền thông tin app: App Name: AWS AI Assistant Pick a workspace: Chọn workspace workshop của bạn Nhấp Create App Mẹo: Sử dụng tên mô tả như \u0026ldquo;AWS AI Assistant\u0026rdquo; để dễ dàng nhận diện bot trong workspace.\nTiếp theo là gì Slack app của bạn đã được tạo! Trong phần tiếp theo, chúng ta sẽ cấu hình các quyền và cài đặt cần thiết để kích hoạt chức năng bot.\nTiếp tục đến: 3.2 Cấu hình App Permissions\n"
},
{
	"uri": "//localhost:1313/vi/6-bedrock_setup/6.1-model_access/",
	"title": "Thiết lập Model Access",
	"tags": [],
	"description": "",
	"content": "Kích hoạt Foundation Model Access Phần này hướng dẫn bạn kích hoạt quyền truy cập đến các Amazon Bedrock foundation models cần thiết cho trợ lý AI của bạn.\nModels Cần thiết Cho workshop này, bạn cần quyền truy cập đến:\nAmazon Titan Text Embeddings V2: Cho document vectorization Anthropic Claude 3 Sonnet: Cho intelligent text generation Truy cập Bedrock Console Điều hướng đến Amazon Bedrock Console Điều hướng đến Model Access Cuộn xuống cuối navigation sidebar và chọn Model access Modify Model Access Nhấp Modify model access Chọn Models Cần thiết Chọn các models cần thiết cho workshop này:\n✅ Amazon Titan Text Embeddings V2 ✅ Anthropic Claude 3 Sonnet Nhấp Next để tiếp tục Submit Access Request Xem lại lựa chọn models và nhấp Submit\nAccess requests thường được phê duyệt ngay lập tức cho các models này Đợi vài phút để quyền truy cập được cấp Xác minh Model Access Xác nhận cả hai models hiển thị trạng thái Access granted:\n✅ Amazon Titan Text Embeddings V2: Access granted ✅ Anthropic Claude 3 Sonnet: Access granted Mẹo: Model access thường được cấp ngay lập tức cho Titan và Claude models. Nếu bạn gặp chậm trễ, đảm bảo AWS account của bạn ở trạng thái tốt.\nTiếp theo là gì Với foundation model access được kích hoạt, bạn đã sẵn sàng tạo Knowledge Base sẽ cung cấp năng lượng cho phản hồi thông minh của trợ lý AI.\nTiếp tục đến: 6.2 Thiết lập Guardrails\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Xây dựng Trợ lý Slackbot AI Tạo sinh với Amazon Bedrock",
	"tags": [],
	"description": "",
	"content": "Xây dựng Trợ lý Slackbot AI Tạo sinh với Amazon Bedrock Tóm tắt nhanh Xây dựng một Slack bot sẵn sàng cho production được hỗ trợ bởi Amazon Bedrock Knowledge Bases có thể trả lời thông minh các câu hỏi về tài liệu của tổ chức bạn sử dụng AI tiên tiến và Retrieval-Augmented Generation (RAG).\nNhững gì bạn sẽ tạo ra:\nSlack bot được hỗ trợ bởi AI với lệnh /ask-ai Hệ thống RAG cấp doanh nghiệp sử dụng Amazon Bedrock Lọc nội dung an toàn với Bedrock Guardrails Kiến trúc serverless có thể mở rộng trên AWS Thời lượng Tổng thời gian Workshop: 3-4 giờ\nModule Thời lượng Khu vực tập trung Thiết lập \u0026amp; Môi trường 45 phút Cấu hình AWS, tạo ứng dụng Slack Knowledge Base 75 phút Ingestion tài liệu, thiết lập cơ sở dữ liệu vector Phát triển Bot 90 phút Hàm Lambda, tích hợp API Gateway Bảo mật \u0026amp; Kiểm thử 30 phút Guardrails, xác thực, giám sát Đối tượng mục tiêu 1. Đối tượng chính\nSolutions Architects muốn triển khai trợ lý được hỗ trợ bởi AI Developers quan tâm đến ứng dụng AI serverless DevOps Engineers triển khai hệ thống AI production Technical Leaders đánh giá giải pháp AI doanh nghiệp 2. Đối tượng phụ\nProduct Managers hiểu khả năng tích hợp AI IT Professionals triển khai công cụ năng suất nơi làm việc Data Engineers làm việc với xử lý dữ liệu phi cấu trúc Kiến thức tiên quyết 1. Kỹ năng bắt buộc\nAWS Fundamentals: Hiểu biết cơ bản về Lambda, S3, IAM, API Gateway Python Programming: Trình độ trung cấp (functions, APIs, xử lý lỗi) REST APIs: Hiểu về HTTP methods và JSON responses Command Line: Thoải mái với terminal/command prompt 2. Kiến thức hữu ích\nServerless Architecture: Kinh nghiệm với event-driven computing AI/ML Concepts: Hiểu biết cơ bản về embeddings và vector search Slack Development: Quen thuộc với Slack apps và webhooks Infrastructure as Code: Kinh nghiệm với CloudFormation hoặc CDK 3. Yêu cầu kỹ thuật\nAWS Account với quyền truy cập quản trị Slack Workspace với quyền cài đặt ứng dụng Development Environment: Python 3.12+, AWS CLI, code editor Internet Connection: Để tải dependencies và truy cập dịch vụ AWS Phân tích chi phí 1. Chi phí hoàn thành Workshop: ~$5-10\nDịch vụ AWS Sử dụng trong Workshop Chi phí ước tính AWS Lambda 1,000 lần gọi $0.20 API Gateway 1,000 requests $3.50 Amazon Bedrock 100K tokens (Claude 3 + Titan) $3.00 OpenSearch Serverless 1 OCU × 4 giờ $0.96 S3 Storage 10GB lưu trữ tài liệu $0.23 CloudWatch Logs Logging cơ bản $0.50 2. Ước tính hàng tháng cho Production\nNhóm nhỏ (10 users, 500 queries/tháng): ~$45 Nhóm trung bình (50 users, 2,500 queries/tháng): ~$175\nNhóm lớn (200 users, 10,000 queries/tháng): ~$650\n3. Mẹo tối ưu hóa chi phí\nSử dụng OpenSearch Serverless auto-scaling Triển khai Lambda provisioned concurrency chỉ khi cần thiết Giám sát việc sử dụng Bedrock token với CloudWatch Thiết lập cảnh báo billing để kiểm soát chi phí Giá trị đề xuất Workshop 1. Lợi ích tức thì\nKinh nghiệm thực hành với dịch vụ AWS AI tiên tiến Code sẵn sàng Production bạn có thể triển khai trong tổ chức Best Practices cho triển khai AI doanh nghiệp Security Patterns cho triển khai AI có trách nhiệm 2. Kỹ năng dài hạn\nThiết kế và triển khai RAG Architecture Phát triển ứng dụng Serverless AI Mẫu Enterprise Integration cho hệ thống AI Chiến lược Cost Optimization cho workloads AI 3. Tác động kinh doanh\nGiảm Support Tickets thông qua truy cập kiến thức tự phục vụ Cải thiện Năng suất với truy xuất thông tin tức thì Tăng cường Hợp tác thông qua tích hợp Slack thông minh Nền tảng có thể mở rộng cho các use case AI bổ sung "
},
{
	"uri": "//localhost:1313/vi/3-slack_app/3.2-create_slash_commands/",
	"title": "Tạo slash commands",
	"tags": [],
	"description": "",
	"content": "Điều hướng đến Slash Commands Trong cài đặt app của bạn, nhấp Slash Commands → Create New Command Cấu hình Chi tiết Command Điền cấu hình command:\nCommand: /ask-ai Request URL: https://www.google.com/ (tạm thời) Short Description:test bedrock Usage Hint: [câu hỏi của bạn về AWS] Lưu ý: Request URL là tạm thời. Chúng ta sẽ cập nhật nó với URL API Gateway thực tế sau khi triển khai cơ sở hạ tầng AWS.\nLưu Command Nhấp Save để tạo slash command thành công Tiếp theo là gì Slash command của bạn đã được cấu hình! Tiếp theo, chúng ta sẽ thiết lập các quyền OAuth cần thiết để bot hoạt động đúng cách.\nTiếp tục đến: 3.3 - Lấy OAuth Tokens\n"
},
{
	"uri": "//localhost:1313/vi/7-lambda_implementation/7.2-config_code/",
	"title": "Tạo và Cấu hình Lambda Function",
	"tags": [],
	"description": "",
	"content": "Phần này hướng dẫn bạn tạo Lambda function và cấu hình nó với code, settings và environment variables cần thiết.\nTạo Lambda Function Thiết lập Function Cơ bản\nTạo Lambda function mới tên BedrockKBSlackbotFunction5:\nRuntime: Python 3.12 Architecture: x86_64 Attach IAM Role\nAttach IAM role BedrockExecutionRole8888 (đã tạo trong section 7.1) và nhấp Create: Upload Function Code Deploy Code Package\nUpload Lambda deployment package:\nTải xuống: BedrockKBSlackbotFunction.zip Truy cập Code tab → Upload from → .zip file Chọn và upload file zip đã tải Chọn Save Upload thành công Lưu ý: File zip chứa Slack Bolt framework và tất cả dependencies cần thiết cho bot functionality.\nCấu hình Function Settings Cập nhật Handler\nThay đổi Handler để khớp với code entry point của bạn:\nHandler: index.handler Điều chỉnh Performance Settings\nCấu hình Memory và Timeout để hiệu suất tối ưu:\nMemory: 512 MB (khuyến nghị cho Bedrock API calls) Timeout: 5 phút (cho phép thời gian cho Knowledge Base queries) Environment Variables Thêm Configuration Variables\nThêm các Environment variables sau:\nKey Value Mục đích KNOWLEDGE_BASE_ID your-kb-id-from-module-6 Tham chiếu Knowledge Base của bạn MODEL_ID anthropic.claude-3-sonnet-20240229-v1:0 Chỉ định text generation model SLACK_BOT_TOKEN_PARAMETER /slack/bot-token5/parameter5 Parameter Store path cho bot token SLACK_SIGNING_SECRET_PARAMETER /slack-bot/signing-secret5/parameter5 Parameter Store path cho signing secret AWS_REGION us-east-1 AWS region cho service calls GUARDRAIL_ID your-guardrail-id Tham chiếu guardrail của bạn SLACK_SLASH_COMMAND /ask-ai slash command đã tạo lúc đầu Required Values\nThay thế các placeholder values này bằng cấu hình thực tế của bạn:\nKNOWLEDGE_BASE_ID: Sao chép từ Bedrock Knowledge Base của bạn (Module 6.3) MODEL_ID: Sử dụng chính xác Claude 3 Sonnet model ID hiển thị ở trên Parameter paths: Phải khớp với cấu hình Parameter Store của bạn (Module 4.2) Quan trọng: Đảm bảo tất cả environment variable values khớp với AWS resources thực tế của bạn. Giá trị không chính xác sẽ gây ra runtime errors.\nTóm tắt Function Configuration 1. Runtime Settings\n✅ Function name: BedrockKBSlackbotFunction5 ✅ Runtime: Python 3.12 ✅ Handler: lambda_function.lambda_handler ✅ Memory: 512 MB ✅ Timeout: 5 phút 2. Security Settings\n✅ Execution role: BedrockExecutionRole8888 ✅ Environment variables: Được cấu hình với giá trị phù hợp ✅ Code package: Đã upload với dependencies Tiếp theo là gì Lambda function của bạn hiện đã được cấu hình và sẵn sàng xử lý Slack commands. Tiếp theo, chúng ta sẽ tạo API Gateway sẽ nhận requests từ Slack và trigger Lambda function của bạn.\nTiếp tục đến: 8. Tích hợp API Gateway và Kiểm thử\n"
},
{
	"uri": "//localhost:1313/vi/5-opensearch/5.2-vector_index/",
	"title": "Tạo Vector Index",
	"tags": [],
	"description": "",
	"content": "Phần này hướng dẫn bạn tạo vector index trong OpenSearch Serverless sử dụng Postman để cho phép k-NN similarity searches cho trợ lý AI của bạn.\nTạo IAM User Tạo Deployment User Tạo IAM user bedrock-chatbot-deployer với policy AdministratorAccess Tạo Access Keys Tạo Access Keys cho programmatic access: Lấy thông tin access key của user mới tạo Thêm tag với Key và Value như một access key Quan trọng: Lưu Access Key ID và Secret Access Key một cách an toàn - chúng sẽ cần thiết cho Postman authentication.\nCấu hình Postman Request Thiết lập Authentication Mở Postman và cấu hình request:\nMethod: PUT URL: \u0026lt;Opensearch-Endpoint\u0026gt;/slack-bedrock-os-index5 Auth Type: AWS Signature Access Key: IAM user access key của bạn Secret Key: IAM user secret key của bạn Region: us-east-1 Service Name: aoss Thiết lập Headers Cấu hình request headers: Content-Type: application/json Cấu hình Request Body Đặt body type thành raw và nhập JSON sau: { \u0026#34;settings\u0026#34;: { \u0026#34;index\u0026#34;: { \u0026#34;knn\u0026#34;: true, \u0026#34;knn.algo_param.ef_search\u0026#34;: 512 } }, \u0026#34;mappings\u0026#34;: { \u0026#34;properties\u0026#34;: { \u0026#34;bedrock-knowledge-base-default-vector\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;knn_vector\u0026#34;, \u0026#34;dimension\u0026#34;: 1024, \u0026#34;method\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;hnsw\u0026#34;, \u0026#34;engine\u0026#34;: \u0026#34;faiss\u0026#34;, \u0026#34;space_type\u0026#34;: \u0026#34;l2\u0026#34;, \u0026#34;parameters\u0026#34;: { \u0026#34;ef_construction\u0026#34;: 512, \u0026#34;m\u0026#34;: 16 } } }, \u0026#34;AMAZON_BEDROCK_METADATA\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;index\u0026#34;: false }, \u0026#34;AMAZON_BEDROCK_TEXT_CHUNK\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;index\u0026#34;: true }, \u0026#34;id\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;index\u0026#34;: true }, \u0026#34;x-amz-bedrock-kb-data-source-id\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;index\u0026#34;: true }, \u0026#34;x-amz-bedrock-kb-document-page-number\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;long\u0026#34;, \u0026#34;index\u0026#34;: true }, \u0026#34;x-amz-bedrock-kb-source-uri\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;index\u0026#34;: true } } } } Tạo Index Gửi Request Nhấp Send để tạo vector index Phản hồi thành công cho biết index đã được tạo Xác minh Index Creation Xác minh index đã được tạo thành công trong OpenSearch console:\nIndex Name: slack-bedrock-os-index5 Vector Field: bedrock-knowledge-base-default-vector Metadata Fields: Có sẵn để tracking document Lưu ý: Vector index được cấu hình với 1024 dimensions để khớp với Amazon Titan Text Embeddings V2 model output và sử dụng thuật toán HNSW cho similarity search hiệu quả.\nGiải thích Index Configuration Vector Settings Dimension: 1024 (khớp với Titan Embeddings V2) Algorithm: HNSW (Hierarchical Navigable Small World) Engine: FAISS (Facebook AI Similarity Search) Space Type: L2 (Euclidean distance) Metadata Fields AMAZON_BEDROCK_TEXT_CHUNK: Document text có thể tìm kiếm AMAZON_BEDROCK_METADATA: Document metadata (không được index) x-amz-bedrock-kb-source-uri: Document source tracking x-amz-bedrock-kb-document-page-number: Page reference Tiếp theo là gì Vector index của bạn hiện đã sẵn sàng để lưu trữ và tìm kiếm document embeddings. Tiếp theo, chúng ta sẽ tạo Bedrock Knowledge Base sẽ sử dụng OpenSearch collection này.\nTiếp tục đến: Thiết lập Bedrock\n"
},
{
	"uri": "//localhost:1313/vi/6-bedrock_setup/6.2-guardrails/",
	"title": "Thiết lập Guardrails",
	"tags": [],
	"description": "",
	"content": "Tổng quan Amazon Bedrock Guardrails Amazon Bedrock Guardrails giúp bạn triển khai các biện pháp bảo vệ cho ứng dụng generative AI bằng cách lọc nội dung có hại, chặn các chủ đề không mong muốn và loại bỏ thông tin nhạy cảm. Điều này đảm bảo trợ lý Slack AI của bạn cung cấp phản hồi an toàn và phù hợp.\nĐiều kiện tiên quyết Trước khi thiết lập guardrails, đảm bảo bạn có:\n✅ Quyền truy cập Amazon Bedrock console ✅ IAM permissions phù hợp cho Bedrock Guardrails ✅ Hiểu biết về yêu cầu lọc nội dung của bạn Truy cập Bedrock Guardrails Console 1. Điều hướng đến Amazon Bedrock\nTruy cập Amazon Bedrock Console Đảm bảo bạn đang ở region us-east-1 Nhấp Guardrails trong left navigation panel Nhấp nút Create guardrail Điều này sẽ bắt đầu guardrail configuration wizard 2. Tạo Guardrail Mới\nName: slack-ai-assistant-guardrail Description: Guardrail for Slack AI Assistant to filter harmful content and protect sensitive information Cấu hình Content Filters 1. Thiết lập Harmful Content Filters\nCấu hình filters cho các loại nội dung có hại khác nhau:\nHate Speech: High - Chặn nội dung thúc đẩy thù hận Insults: Medium - Lọc ngôn ngữ xúc phạm Sexual Content: High - Chặn nội dung tình dục không phù hợp Violence: High - Lọc nội dung bạo lực Misconduct: Medium - Chặn nội dung hành vi phi đạo đức 2. Thiết lập Prompt Attacks\nPrompt Attacks: High - Ngăn chặn prompt injection attacks Cấu hình Word Filters (Tùy chọn) 1. Thiết lập Profanity Filters\nThêm các từ hoặc cụm từ cụ thể để chặn:\nProfanity Filter: Kích hoạt để chặn profanity phổ biến Custom Words: Thêm các thuật ngữ cụ thể của công ty để tránh Sensitive Terms: Chặn tên mã nội bộ hoặc thuật ngữ bí mật Lưu ARN và ID Khắc phục Sự cố Thường gặp 1. Guardrail Creation Fails\nVấn đề: Permission denied Giải pháp: Xác minh IAM permissions cho Bedrock Guardrails 2. Over-filtering Legitimate Content\nVấn đề: Quá nhiều false positives Giải pháp: Điều chỉnh filter levels từ High xuống Medium 3. PII Not Being Detected\nVấn đề: Dữ liệu nhạy cảm đi qua Giải pháp: Kích hoạt thêm PII types hoặc sử dụng custom regex patterns Best Practice: Bắt đầu với moderate filtering levels và điều chỉnh dựa trên nhu cầu tổ chức và phản hồi người dùng.\nCác bước tiếp theo Với guardrail được cấu hình, bạn đã sẵn sàng tích hợp nó với Knowledge Base.\nTiếp tục đến: 6.3 Thiết lập Knowledge Base\nTóm tắt Trong phần này, bạn đã:\n✅ Tạo Amazon Bedrock Guardrail ✅ Cấu hình content filters cho harmful content ✅ Thiết lập PII protection cho thông tin nhạy cảm ✅ Kiểm thử guardrail functionality ✅ Chuẩn bị cho Lambda integration Trợ lý AI của bạn hiện có các biện pháp an toàn mạnh mẽ để đảm bảo phản hồi phù hợp và an toàn trong Slack workspace của bạn!\n"
},
{
	"uri": "//localhost:1313/vi/2-environment-setup/",
	"title": "Thiết lập Môi trường",
	"tags": [],
	"description": "",
	"content": "Tổng quan Thiết lập Môi trường Trước khi xây dựng Trợ lý Slack AI Tạo sinh của bạn, bạn cần thiết lập các môi trường và công cụ cần thiết. Module này sẽ hướng dẫn bạn tạo Slack workspace, cấu hình dịch vụ AWS và chuẩn bị môi trường phát triển.\nDanh sách kiểm tra Điều kiện tiên quyết Đảm bảo bạn có những điều sau trước khi tiếp tục:\n✅ AWS Account với quyền truy cập quản trị ✅ Địa chỉ email để tạo Slack workspace ✅ Python 3.12+ được cài đặt trên máy local ✅ AWS CLI được cài đặt và cấu hình ✅ Code editor (khuyến nghị VS Code) Mục tiêu học tập Module Kết thúc module này, bạn sẽ có:\nTạo Slack workspace để kiểm thử bot Cấu hình AWS CLI với thông tin đăng nhập phù hợp Kích hoạt Amazon Bedrock models trong AWS account Thiết lập môi trường phát triển với các dependencies cần thiết Xác minh tất cả điều kiện tiên quyết cho workshop Tạo Slack Workspace 1. Điều hướng đến Slack\nTruy cập Slack.com và nhấp Create a new workspace.\n2. Quy trình Đăng ký\nNhập email để đăng nhập 3. Nhấp Create a Workspace Hoàn thành Thiết lập Workspace 1. Hoàn thành quy trình tạo workspace bằng cách cung cấp:\nTên workspace (ví dụ: \u0026ldquo;AI-Assistant-Workshop\u0026rdquo;) Tên channel (ví dụ: \u0026ldquo;#ai-assistant\u0026rdquo;) Lời mời thành viên nhóm (tùy chọn cho workshop) Mẹo: Giữ tên workspace đơn giản và liên quan đến workshop. Bạn sẽ sử dụng workspace này để kiểm thử trợ lý AI.\nCấu hình AWS Account 1. Xác minh Quyền truy cập AWS Account\nĐăng nhập AWS Console\nĐiều hướng đến AWS Console Đảm bảo bạn có quyền truy cập quản trị hoặc các quyền sau: Amazon Bedrock full access Lambda full access API Gateway full access S3 full access OpenSearch Serverless access 2. Cấu hình AWS CLI\nCài đặt AWS CLI (nếu chưa cài đặt)\n# Windows msiexec.exe /i https://awscli.amazonaws.com/AWSCLIV2.msi # macOS curl \u0026#34;https://awscli.amazonaws.com/AWSCLIV2.pkg\u0026#34; -o \u0026#34;AWSCLIV2.pkg\u0026#34; sudo installer -pkg AWSCLIV2.pkg -target / # Linux curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34; unzip awscliv2.zip sudo ./aws/install 3. Cấu hình AWS credentials\naws configure Nhập những thông tin sau khi được nhắc:\nAWS Access Key ID: Access key của bạn AWS Secret Access Key: Secret key của bạn Default region name: us-east-1 (khuyến nghị cho Bedrock) Default output format: json 4. Xác minh cấu hình\naws sts get-caller-identity Quan trọng: Sử dụng region us-east-1 cho workshop này vì nó có khả năng model tốt nhất cho Amazon Bedrock.\nKhắc phục Sự cố Thường gặp Sự cố AWS CLI\nVấn đề: aws: command not found Giải pháp: Khởi động lại terminal sau khi cài đặt hoặc thêm AWS CLI vào PATH Cần Trợ giúp? Nếu bạn gặp sự cố, kiểm tra Hướng dẫn Khắc phục Sự cố hoặc hỏi người hướng dẫn workshop.\nCác bước tiếp theo Với môi trường được cấu hình đúng cách, bạn đã sẵn sàng bắt đầu xây dựng nền tảng knowledge base cho trợ lý AI.\nTiếp tục đến: Thiết lập Slack App\nTóm tắt Trong module này, bạn đã:\n✅ Tạo Slack workspace để kiểm thử ✅ Cấu hình AWS CLI và xác minh quyền truy cập Môi trường phát triển của bạn hiện đã sẵn sàng để xây dựng Trợ lý Slack AI Tạo sinh!\n"
},
{
	"uri": "//localhost:1313/vi/4-security/4.2-systems_manager/",
	"title": "Cấu hình Systems Manager Parameter Store",
	"tags": [],
	"description": "",
	"content": "AWS Systems Manager Parameter Store cung cấp runtime secret resolution bằng cách tạo tham chiếu đến Secrets Manager, cho phép Lambda functions fetch credentials động mà không cần truy cập trực tiếp đến secrets.\nTruy cập Parameter Store Điều hướng đến AWS Systems Manager Console Tạo Bot Token Parameter Tạo parameter cho bot-token5:\nNhấp Create parameter Name: /slack/bot-token5/parameter5 Type: String Value: slack/bot-token5 Tạo thành công Tạo Signing Secret Parameter Tạo parameter cho signing-secret5:\nNhấp Create parameter Name: /slack/signing-secret5/parameter5 Type: String Value: slack/signing-secret5 Tạo thành công Ghi chú Parameter ARNs Sao chép Parameter ARNs cho cấu hình IAM policy:\nSigning secret ARN: arn:aws:ssm:region:account:parameter/slack/signing-secret5/parameter5 Bot token ARN: arn:aws:ssm:region:account:parameter/slack/bot-token5/parameter5 Tiếp theo là gì Parameter Store của bạn hiện đã được cấu hình để tham chiếu an toàn đến Secrets Manager. Các parameters này sẽ được sử dụng bởi Lambda functions để truy cập Slack credentials mà không bị lộ secret trực tiếp.\nTiếp tục đến: 5 OpenSearch Serverless\n"
},
{
	"uri": "//localhost:1313/vi/3-slack_app/3.3-oauth_permissions/",
	"title": "Lấy OAuth Tokens",
	"tags": [],
	"description": "",
	"content": "Cấu hình Bot Permissions Điều hướng đến OAuth \u0026amp; Permissions trong cài đặt app của bạn Cuộn xuống Scopes → Bot Token Scopes và thêm: commands - Kích hoạt slash commands chat:write - Gửi tin nhắn như bot channels:read - Cấp cho bot quyền truy cập thông tin cơ bản của các kênh công khai trong Slack workspace Cài đặt App vào Workspace Cuộn lên và nhấp Install to Workspace Xem lại quyền và nhấp Allow Sao chép OAuth Tokens Sau khi cài đặt, bạn sẽ thấy Bot User OAuth Token (bắt đầu với xoxb-) Sao chép và lưu token này một cách an toàn - bạn sẽ cần nó cho cấu hình AWS Lambda Quan trọng: Giữ OAuth token an toàn và không bao giờ commit nó vào version control. Chúng ta sẽ lưu trữ nó trong AWS Secrets Manager sau.\nTiếp theo là gì Slack app của bạn hiện đã được cấu hình đầy đủ với các quyền và tokens cần thiết. Tiếp theo, chúng ta sẽ chuyển sang xây dựng cơ sở hạ tầng AWS sẽ cung cấp năng lượng cho trợ lý AI của bạn.\nTiếp tục đến: 4 - Cấu hình Bảo mật\n"
},
{
	"uri": "//localhost:1313/vi/6-bedrock_setup/6.3-knowledge_base/",
	"title": "Thiết lập knowledge base",
	"tags": [],
	"description": "",
	"content": "Tạo Bedrock Knowledge Base Phần này hướng dẫn bạn tạo Bedrock Knowledge Base với S3 data source và tích hợp OpenSearch Serverless cho trợ lý AI của bạn.\nCấu hình S3 Tạo S3 Bucket Tạo S3 bucket mới để lưu trữ documents của bạn: Region: us-east-1\nSử dụng cài đặt mặc định cho các cấu hình khác Bucket name: bucket-bedrock-document868686 Ghi chú ARN Mẹo: Sử dụng tên bucket duy nhất bằng cách bao gồm account ID của bạn để tránh xung đột tên.\nCấu hình Knowledge Base Truy cập Bedrock Console Điều hướng đến Amazon Bedrock Console Tạo Knowledge Base Điều hướng đến Knowledge base trong sidebar Nhấp Create → Knowledge Base with vector store Cấu hình Knowledge Base Settings Thiết lập cấu hình knowledge base:\nThông tin Cơ bản:\nKnowledge base name: slack-bedrock-kb5 IAM Role: Tạo service role mới tên BedrockKnowledgeBaseRole5 Data Source:\nData source type: Amazon S3 Cấu hình S3:\nChọn S3 bucket đã tạo của bạn Sử dụng chunking strategy mặc định Embeddings Model:\nChọn Amazon Titan Text Embeddings V2 Vector Store:\nChọn Amazon OpenSearch Serverless Cấu hình OpenSearch:\nCollection: slack-bedrock-vector-db5 (đã tạo trong Module 5) Vector index name: slack-bedrock-os-index5 Vector field name: bedrock-knowledge-base-default-vector Text field name: AMAZON_BEDROCK_TEXT_CHUNK Metadata field name:AMAZON_BEDROCK_METADATA Hoàn thành Creation Tạo và ghi chú Knowledge Base ID: Xác minh IAM role được tạo tự động có các policies cần thiết: Upload và Sync Documents Upload Sample Document Upload sample document vào S3 bucket của bạn:\nTải xuống: PostgreSQL 16 Documentation Upload vào S3 bucket của bạn Sync Knowledge Base Sync Knowledge Base để xử lý documents đã upload:\nTruy cập Knowledge Base Data source của bạn Nhấp Sync để bắt đầu document processing Đợi sync hoàn thành (có thể mất vài phút) Lưu ý: Quy trình sync sẽ chunk documents của bạn, tạo embeddings sử dụng Titan V2, và lưu trữ chúng trong OpenSearch Serverless cho semantic search.\nTiếp theo là gì Bedrock Knowledge Base của bạn hiện đã được cấu hình và sẵn sàng trả lời câu hỏi về documents đã upload. Tiếp theo, chúng ta sẽ tạo Lambda function sẽ tích hợp Knowledge Base này với Slack bot của bạn.\nTiếp tục đến: 7 Triển khai Lambda\n"
},
{
	"uri": "//localhost:1313/vi/3-slack_app/",
	"title": "Thiết lập Slack App",
	"tags": [],
	"description": "",
	"content": "Tổng quan Slack app mở rộng chức năng của Slack bằng cách thêm các tính năng mới, tự động hóa tác vụ và tích hợp với các dịch vụ bên ngoài. Đối với trợ lý AI của chúng ta, Slack app đóng vai trò là giao diện giữa người dùng và knowledge base được hỗ trợ bởi Amazon Bedrock, cho phép truy vấn ngôn ngữ tự nhiên thông qua slash commands.\nNhững gì bạn sẽ hoàn thành Trong module này, bạn sẽ:\nTạo Slack app mới trong workspace của bạn Cấu hình OAuth permissions và slash commands Tạo authentication tokens cho tích hợp AWS Kiểm thử cài đặt app cơ bản Các thành phần chính 1. Cấu hình Slack App\nTên App: AWS AI Assistant Slash Command: /ask-ai Quyền cần thiết: commands, chat:write, channels:read 2. Thông tin đăng nhập Authentication\nBot Token: Cho giao tiếp API (bắt đầu với xoxb-) Signing Secret: Cho xác minh request Request URL: Sẽ kết nối với AWS API Gateway Kết quả mong đợi Kết thúc module này, bạn sẽ có một Slack app được cấu hình sẵn sàng kết nối với cơ sở hạ tầng backend AWS mà chúng ta sẽ xây dựng trong các module tiếp theo. Slash command sẽ hiển thị trong workspace của bạn nhưng sẽ không hoạt động cho đến khi chúng ta triển khai giải pháp hoàn chỉnh.\nTiếp tục đến:\n3.1 Tạo slack app 3.2 Tạo slash commands 3.3 Lấy OAuth Tokens "
},
{
	"uri": "//localhost:1313/vi/4-security/",
	"title": "Cấu hình Bảo mật",
	"tags": [],
	"description": "",
	"content": "Tổng quan Bảo mật Bảo mật là yếu tố nền tảng của hệ thống AI chatbot, được triển khai thông qua phương pháp hai lớp kết hợp AWS Secrets Manager và AWS Systems Manager Parameter Store để quản lý thông tin đăng nhập an toàn trong suốt vòng đời ứng dụng.\nNhững gì bạn sẽ học Trong module này, bạn sẽ hiểu:\nKiến trúc bảo mật hai lớp sử dụng AWS Secrets Manager và Parameter Store Quản lý thông tin đăng nhập an toàn cho Slack authentication tokens IAM best practices cho quyền truy cập tối thiểu Runtime secret resolution không có giá trị hardcoded Kiến trúc Bảo mật 1. Các thành phần chính\nThành phần Mục đích Lợi ích Bảo mật AWS Secrets Manager Lưu trữ Slack credentials mã hóa Rotation tự động, mã hóa at rest Parameter Store Runtime secret resolution Fetching động, không có giá trị hardcoded IAM Policies Kiểm soát truy cập Nguyên tắc least privilege 2. Luồng Bảo mật\ngraph TB\rA[Lambda Function] --\u0026gt; B[Parameter Store]\rB --\u0026gt; C[Secrets Manager]\rC --\u0026gt; D[Encrypted Slack Credentials]\rE[IAM Policies] --\u0026gt; A\rE --\u0026gt; B\rE --\u0026gt; C\rstyle C fill:#ffebee\rstyle D fill:#f3e5f5\rstyle E fill:#e8f5e8 Lợi ích Bảo mật 1. Tách biệt Mối quan tâm\nSecrets Manager: Xử lý mã hóa và lưu trữ an toàn Parameter Store: Quản lý phân phối có kiểm soát IAM: Kiểm soát quyền truy cập 2. Dynamic Resolution\nCredentials được fetch tại runtime sử dụng cú pháp {{resolve:secretsmanager:...}} Luôn có giá trị cập nhật mà không cần khởi động lại ứng dụng Không có secrets hardcoded trong source code hoặc environment variables 3. Audit và Compliance\nTruy xuất truy cập hoàn chỉnh thông qua CloudTrail Logging sẵn sàng compliance cho security audits Khả năng giám sát cho các nỗ lực truy cập trái phép 4. Tối ưu hóa Chi phí\nParameter Store parameters tier tiêu chuẩn Mô hình pay-per-use không có chi phí trả trước Không có phí mã hóa bổ sung Phương pháp Triển khai Triển khai bảo mật tuân theo các nguyên tắc sau:\nLeast Privilege Access: Lambda functions chỉ truy cập các parameters cần thiết No Direct Secrets Access: Parameter Store hoạt động như lớp trung gian Encryption at Rest: Tất cả secrets được mã hóa sử dụng AWS-managed keys Runtime Resolution: Credentials được resolve động trong quá trình thực thi Kết quả Mong đợi Sau khi triển khai kiến trúc bảo mật này:\n✅ Slack credentials được lưu trữ và mã hóa an toàn ✅ Lambda functions truy cập secrets mà không bị lộ trực tiếp ✅ Audit trail hoàn chỉnh cho yêu cầu compliance ✅ Thiết lập tư thế bảo mật sẵn sàng production Tiếp tục đến: 4.1 Cấu hình AWS Secrets Manager\n"
},
{
	"uri": "//localhost:1313/vi/5-opensearch/",
	"title": "OpenSearch Serverless",
	"tags": [],
	"description": "",
	"content": "Tổng quan OpenSearch Serverless Amazon OpenSearch Serverless hoạt động như cơ sở dữ liệu vector tập trung và memory engine điều khiển khả năng semantic retrieval của quy trình Retrieval-Augmented Generation (RAG). Nó lưu trữ document embeddings và cho phép tìm kiếm similarity hiệu suất cao để trả lời câu hỏi thông minh.\nNhững gì bạn sẽ học Trong module này, bạn sẽ hiểu:\nKiến trúc vector database sử dụng OpenSearch Serverless Lưu trữ document embedding với Amazon Titan Text Embeddings V2 Khả năng semantic search sử dụng thuật toán k-nearest neighbor Lợi ích serverless scaling và tối ưu hóa chi phí Kiến trúc OpenSearch 1. Luồng Vector Storage\ngraph TB\rA[Documents] --\u0026gt; B[Titan Embeddings V2]\rB --\u0026gt; C[Vector Embeddings]\rC --\u0026gt; D[OpenSearch Collection]\rD --\u0026gt; E[Vector Index]\rF[User Query] --\u0026gt; G[Query Embedding]\rG --\u0026gt; H[Similarity Search]\rH --\u0026gt; I[Relevant Chunks]\rstyle D fill:#e8f5e8\rstyle E fill:#fff3e0\rstyle H fill:#e1f5fe 2. Các thành phần chính\nThành phần Mục đích Lợi ích Vector Collection Lưu trữ document embeddings Serverless, auto-scaling storage Vector Index Cho phép similarity search Thuật toán k-NN hiệu suất cao Metadata Storage Bảo tồn document context Kết quả retrieval có thể truy vết IAM Integration Bảo mật và kiểm soát truy cập Quyền chi tiết Cách hoạt động 1. Document Ingestion\nDocuments được xử lý thành vector embeddings nhiều chiều Amazon Titan Text Embeddings V2 model tạo semantic representations Hỗ trợ nhiều ngôn ngữ bao gồm tiếng Việt và tiếng Anh Vectors được lưu trữ trong collection slack-bedrock-vector-db5 2. Vector Indexing\nEmbeddings được index sử dụng slack-bedrock-os-index5 Thuật toán k-nearest neighbor (k-NN) cho phép similarity search Metadata được bảo tồn để truy vết document Thời gian phản hồi query dưới một giây 3. Query Processing\nCâu hỏi của người dùng được embed sử dụng cùng Titan V2 model Query embedding được so sánh với stored vectors Document chunks liên quan nhất được retrieve Context được cung cấp cho hệ thống RAG để tạo phản hồi Lợi ích Serverless 1. Auto-Scaling\nTự động scale theo traffic volume Không cần quản lý cluster thủ công Xử lý workloads thay đổi một cách liền mạch 2. Tối ưu hóa Chi phí\nMô hình pricing pay-per-use Chi phí có thể dự đoán phù hợp với usage Không có đầu tư infrastructure trả trước 3. Đơn giản Vận hành\nKhông cần provisioning hoặc maintenance node Dịch vụ được quản lý hoàn toàn High availability tích hợp sẵn Tính năng Bảo mật 1. Kiểm soát Truy cập\nQuyền dựa trên IAM với BedrockOSSPolicyForKnowledgeBase Kiểm soát truy cập chi tiết cho các thành phần được ủy quyền Tích hợp với dịch vụ bảo mật AWS 2. Bảo vệ Dữ liệu\nMã hóa at rest và in transit Lưu trữ và retrieval vector an toàn Tuân thủ tiêu chuẩn bảo mật doanh nghiệp Đặc điểm Hiệu suất Response Time: Similarity searches dưới một giây Scalability: Auto scaling dựa trên demand Accuracy: Hiểu ngữ nghĩa qua các ngôn ngữ Reliability: Redundancy và fault tolerance tích hợp sẵn Kết quả Mong đợi Sau khi hiểu kiến trúc OpenSearch Serverless:\n✅ Vector database phục vụ như persistent memory layer ✅ Semantic search cho phép intelligent document retrieval ✅ Kiến trúc serverless cung cấp cost-effective scaling ✅ Enterprise security đảm bảo data protection OpenSearch Serverless hoạt động như trí nhớ thông minh của trợ lý AI, cho phép nó nhớ lại và tham chiếu kiến thức tổ chức với độ chính xác ngữ nghĩa.\nTiếp tục đến:\n5.1 OpenSearch Serverless Collection 5.2 Tạo Vector Index "
},
{
	"uri": "//localhost:1313/vi/6-bedrock_setup/",
	"title": "Thiết lập Bedrock",
	"tags": [],
	"description": "",
	"content": "Tổng quan Thiết lập Bedrock Amazon Bedrock đóng vai trò là AI engine cốt lõi cho Slack assistant của chúng ta, cung cấp cả foundation models cho text generation và dịch vụ Knowledge Base được quản lý cho Retrieval-Augmented Generation (RAG). Module này bao gồm thiết lập cần thiết để kích hoạt và cấu hình dịch vụ Bedrock cho trợ lý AI của bạn.\nNhững gì bạn sẽ học Trong module này, bạn sẽ hiểu:\nFoundation model access cho text generation và embeddings Knowledge Base creation với khả năng RAG S3 integration cho document storage và processing IAM roles và permissions cho Bedrock operations an toàn Kiến trúc Bedrock 1. Các thành phần cốt lõi\ngraph TB\rA[Foundation Models] --\u0026gt; B[Knowledge Base]\rC[S3 Documents] --\u0026gt; B\rB --\u0026gt; D[OpenSearch Serverless]\rB --\u0026gt; E[RAG Responses]\rF[IAM Roles] --\u0026gt; A\rF --\u0026gt; B\rF --\u0026gt; C\rstyle A fill:#fff3e0\rstyle B fill:#e8f5e8\rstyle D fill:#e1f5fe 2. Các dịch vụ chính\nDịch vụ Mục đích Lợi ích Claude 3 Sonnet Text generation và reasoning Phản hồi ngôn ngữ tự nhiên chất lượng cao Titan Embeddings V2 Document vectorization Hiểu ngữ nghĩa và tìm kiếm Knowledge Base RAG orchestration Workflow retrieval và generation tự động S3 Integration Document storage Quản lý document có thể mở rộng, an toàn Foundation Models 1. Claude 3 Sonnet\nMục đích: Primary text generation model Khả năng: Advanced reasoning, context understanding, multilingual support Use Case: Tạo phản hồi thông minh dựa trên kiến thức được retrieve 2. Amazon Titan Text Embeddings V2\nMục đích: Chuyển đổi text thành vector embeddings Dimensions: 1024-dimensional vectors Languages: Hỗ trợ nhiều ngôn ngữ bao gồm tiếng Anh và tiếng Việt Use Case: Tạo vector representations có thể tìm kiếm của documents Knowledge Base Service 1. Managed RAG Workflow\nDocument Ingestion: Xử lý tự động S3 documents Chunking Strategy: Phân đoạn text thông minh để retrieval tối ưu Vector Storage: Tích hợp với OpenSearch Serverless Retrieval Logic: Semantic similarity search với parameters có thể cấu hình 2. Lợi ích\nFully Managed: Không cần quản lý infrastructure Auto-Scaling: Xử lý document volumes và query loads thay đổi Security: Mã hóa và access controls tích hợp sẵn Cost-Effective: Mô hình pricing pay-per-use Kết quả Mong đợi Sau khi hoàn thành thiết lập module này:\n✅ Foundation models được kích hoạt cho text generation và embeddings ✅ Knowledge Base được cấu hình với S3 document source ✅ RAG workflow hoạt động cho intelligent question answering ✅ Tích hợp an toàn với OpenSearch Serverless được thiết lập Thiết lập này cung cấp lớp AI intelligence biến đổi Slack bot của bạn từ giao diện đơn giản thành trợ lý có kiến thức có khả năng hiểu và phản hồi các truy vấn phức tạp về documents tổ chức của bạn.\nTiếp tục đến:\n6.1 - Thiết lập Model Access 6.2 Thiết lập guardrails 6.3 Thiết lập knowledge base "
},
{
	"uri": "//localhost:1313/vi/7-lambda_implementation/",
	"title": "Triển khai Lambda",
	"tags": [],
	"description": "",
	"content": "Tổng quan Lambda Function Lambda function đóng vai trò là orchestrator cốt lõi giữa Slack và Amazon Bedrock Knowledge Base, xử lý user queries và cung cấp intelligent responses. Nó quản lý luồng tương tác hoàn chỉnh từ Slack command processing đến AI-powered response generation.\nNhững gì bạn sẽ học Trong module này, bạn sẽ hiểu:\nLambda function architecture cho Slack bot integration Asynchronous processing với yêu cầu acknowledgment 3 giây Bedrock Knowledge Base integration sử dụng RetrieveAndGenerate API Security management với Secrets Manager và Parameter Store Kiến trúc Function Request Flow graph TB\rA[Slack Slash Command] --\u0026gt; B[Lambda Function]\rB --\u0026gt; C[3-Second Acknowledgment]\rB --\u0026gt; D[Retrieve Credentials]\rD --\u0026gt; E[Bedrock RetrieveAndGenerate]\rE --\u0026gt; F[Knowledge Base Query]\rF --\u0026gt; G[AI Response]\rG --\u0026gt; H[Send to Slack]\rstyle B fill:#fff3e0\rstyle E fill:#e8f5e8\rstyle F fill:#e1f5fe Các thành phần chính Thành phần Mục đích Thời gian Slack Acknowledgment Ngăn chặn timeout errors \u0026lt; 3 giây Credential Retrieval Truy cập an toàn AWS services Initialization Bedrock Integration AI-powered response generation Asynchronous Response Delivery Gửi kết quả trở lại Slack Sau processing Chức năng Cốt lõi 1. Slack Integration\nSlash Command Processing: Xử lý lệnh /ask-ai từ users 3-Second Rule: Acknowledge requests trong giới hạn timeout của Slack Asynchronous Response: Xử lý queries và phản hồi sau acknowledgment 2. Security Management\nAWS Secrets Manager: Retrieve Slack bot tokens một cách an toàn Parameter Store: Truy cập configuration values tại runtime IAM Integration: Đảm bảo least privilege access đến AWS services 3. AI Processing\nRetrieveAndGenerate API: Query Bedrock Knowledge Base Semantic Search: Tìm relevant document chunks Response Generation: Tạo intelligent answers sử dụng Claude 3 Sonnet 4. Configuration Management\nModel ID: Chỉ định Claude 3 Sonnet cho text generation Knowledge Base ID: Tham chiếu Knowledge Base đã tạo của bạn Guardrail Settings: Đảm bảo safe và appropriate responses Processing Flow Phase 1: Request Handling (\u0026lt; 3 giây)\nNhận Slack slash command Validate request signature Gửi acknowledgment đến Slack Queue request để processing Phase 2: AI Processing (Asynchronous)\nRetrieve credentials từ Parameter Store Initialize Bedrock client Gọi RetrieveAndGenerate API Xử lý Knowledge Base response Gửi final answer đến Slack Kết quả Mong đợi Sau khi triển khai Lambda function:\n✅ Slack commands được xử lý trong giới hạn timeout ✅ Secure credential management được thiết lập ✅ AI-powered responses được cung cấp cho users ✅ Tích hợp hoàn chỉnh giữa Slack và Bedrock Lambda function hoạt động như cả orchestrator và executor, đảm bảo tương tác liền mạch giữa Slack users và knowledge base tổ chức của bạn thông qua intelligent AI responses.\nTiếp tục đến:\n7.1 Tạo Lambda Execution Role 7.2 Tạo và Cấu hình Lambda Function "
},
{
	"uri": "//localhost:1313/vi/8-api_gateway/",
	"title": "Tích hợp API Gateway và Kiểm thử",
	"tags": [],
	"description": "",
	"content": "Thiết lập và Kiểm thử API Gateway Module cuối cùng này kết nối tất cả các thành phần lại với nhau bằng cách tạo API Gateway endpoint nhận Slack requests và trigger Lambda function của bạn, sau đó kiểm thử chức năng AI assistant hoàn chỉnh.\nTạo API Gateway Tạo REST API\nĐiều hướng đến API Gateway Console Tạo REST API mới:\nAPI Type: REST API API Name: slack-bedrock-api5 Description: API for Slack AI Assistant Tạo thành công Tạo Resource Structure\nTạo resource tên slack:\nResource Name: slack Resource Path: / Tạo sub-resource tên ask-aws:\nParent Resource: /slack Resource Name: ask-ai Resource Path: /slack/ask-ai Cấu hình Method\nTạo method POST cho resource ask-ai: Cấu hình method settings:\nIntegration Type: Lambda Function Use Lambda Proxy Integration: ✅ Enabled Lambda Function: BedrockKBSlackbotFunction5 Use Default Timeout: ✅ Enabled Method POST được tạo thành công Lưu ý: Lambda Proxy Integration chuyển toàn bộ request đến Lambda và mong đợi phản hồi được định dạng đúng cách.\nDeploy API\nDeploy API đến stage mới:\nDeployment Stage: New Stage Stage Name: prod Stage Description: Production deployment Cập nhật Slack Configuration\nSao chép Invoke URL từ API đã deploy:\nFormat: https://your-api-id.execute-api.us-east-1.amazonaws.com/prod/slack/ask-ai Cập nhật cấu hình Slash Commands của Slack app:\nĐiều hướng đến Slack app settings của bạn Truy cập Slash Commands Cập nhật Request URL với API Gateway invoke URL Nhấp Save Changes Quan trọng: Request URL phải khớp chính xác với API Gateway endpoint bao gồm path /slack/ask-aws.\nKiểm thử AI Assistant của bạn Successful Knowledge Retrieval\nTest Query: Đặt câu hỏi về nội dung trong PDF đã upload\nCommand: /ask-ai How do i create an index in PostgreSQL and when should i use one? Kết quả mong đợi: AI assistant retrieve thông tin liên quan từ Knowledge Base và cung cấp câu trả lời chính xác Command: /ask-aws What are the main data types used in PostgreSQL? Kết quả mong đợi: AI assistant retrieve thông tin liên quan từ Knowledge Base và cung cấp câu trả lời chính xác Guardrails Protection\nTest Query: Cố gắng trigger content filtering Command: /ask-aws How can i hack into a PostgreSQL system? Kết quả mong đợi: Bedrock Guardrails chặn request và trả về safety message Information Not Available\nTest Query: AI assistant lịch sự chỉ ra thông tin không có sẵn trong knowledge base\nCommand: /ask-aws Tell me something inappropriate Kết quả mong đợi: Hỏi về nội dung không có trong Knowledge Base của bạn Testing Checklist Xác minh AI assistant của bạn xử lý các scenario này đúng cách:\n✅ Knowledge Base Queries: Trả lời câu hỏi từ documents đã upload ✅ Source Attribution: Cung cấp tham chiếu đến source documents ✅ Unknown Information: Xử lý gracefully các queries ngoài knowledge base ✅ Content Safety: Guardrails chặn inappropriate requests ✅ Response Time: Acknowledge commands trong vòng 3 giây ✅ Error Handling: Cung cấp error messages hữu ích khi có sự cố Khắc phục Sự cố Thường gặp 1. API Gateway Issues\n403 Forbidden: Kiểm tra Lambda function permissions 502 Bad Gateway: Xác minh Lambda function response format Timeout: Tăng Lambda timeout hoặc kiểm tra Knowledge Base sync 2. Slack Integration Issues\nCommand Not Found: Xác minh Request URL khớp với API Gateway endpoint No Response: Kiểm tra CloudWatch logs cho Lambda errors Permission Denied: Xác minh Slack app có OAuth scopes phù hợp 3. Knowledge Base Issues\nNo Relevant Results: Đảm bảo documents được sync đúng cách Incorrect Answers: Kiểm tra document quality và chunking strategy Slow Responses: Giám sát OpenSearch Serverless performance Chúc mừng! 🎉 Bạn đã thành công xây dựng và deploy Generative AI Slack Assistant sẵn sàng production với:\n✅ Intelligent Question Answering sử dụng Amazon Bedrock Knowledge Bases ✅ Enterprise Security với Secrets Manager và Guardrails ✅ Scalable Architecture sử dụng serverless AWS services ✅ Real-time Integration với Slack cho seamless user experience AI assistant của bạn hiện đã sẵn sàng giúp users truy cập organizational knowledge thông qua natural language conversations trong Slack!\nCác bước tiếp theo: Tiếp tục đến: 9. Dọn dẹp resources\nXem xét các cải tiến này cho production deployment:\nThêm nhiều documents để mở rộng knowledge base Triển khai user feedback collection để cải tiến liên tục Thiết lập monitoring và alerting cho production operations Cấu hình auto-scaling cho high-volume usage Thêm multi-language support cho global organizations Workshop Hoàn thành! 🚀\n"
},
{
	"uri": "//localhost:1313/vi/9-clean_resources/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Dọn dẹp Resource Module này hướng dẫn bạn dọn dẹp đúng cách tất cả AWS resources đã tạo trong workshop để tránh phí phát sinh. Tuân theo thứ tự xóa cẩn thận để ngăn chặn dependency errors.\nQuan trọng: Xóa các resources này là không thể hoàn tác. Đảm bảo bạn đã lưu bất kỳ dữ liệu hoặc cấu hình quan trọng nào trước khi tiến hành.\nThứ tự Cleanup Tuân theo thứ tự cụ thể này để tránh dependency conflicts:\nXóa API Gateway\nXóa API Gateway:\nĐiều hướng đến API Gateway Console Chọn slack-bedrock-api5 của bạn Nhấp Actions → Delete API Xác nhận deletion Xóa Lambda Function\nXóa Lambda Function:\nĐiều hướng đến Lambda Console Chọn BedrockKBSlackbotFunction5 Nhấp Actions → Delete Xác nhận deletion Xóa Bedrock Knowledge Base\nXóa Knowledge Base:\nĐiều hướng đến S3 Console Đầu tiên: Xóa tất cả objects trong bucket Sau đó: Xóa chính bucket Xác nhận deletion Điều hướng đến Bedrock Console Truy cập Knowledge bases Chọn knowledge base của bạn Nhấp Delete Xác nhận deletion Lưu ý: Đợi Knowledge Base deletion hoàn thành trước khi tiến hành OpenSearch cleanup.\nXóa OpenSearch Serverless Resources\nXóa OpenSearch Components (theo thứ tự này):\na) Xóa Vector Index:\nSử dụng Postman hoặc AWS CLI để xóa index DELETE request đến: https://your-collection-endpoint/slack-bedrock-os-index5 b) Xóa Collection:\nĐiều hướng đến OpenSearch Console Chọn Collections Xóa slack-bedrock-vector-db5 c) Xóa Data Access Policy:\nTruy cập Data access policies Xóa access policy của bạn d) Xóa Network Policy:\nTruy cập Network policies Xóa network policy của bạn Xóa Security Resources\nXóa AWS Secrets Manager Secrets:\nĐiều hướng đến Secrets Manager Console Xóa slack/bot-token5 Xóa slack/signing-secret5 Xác nhận immediate deletion (bỏ qua recovery period) Xóa Systems Manager Parameters:\nĐiều hướng đến Systems Manager Console Truy cập Parameter Store Xóa /slack/bot-token5/parameter5 Xóa /slack/signing-secret5/parameter5 Dọn dẹp IAM Resources\nXóa IAM Role (Tùy chọn): Điều hướng đến IAM Console Xóa BedrockExecutionRole8888 Xóa bedrock-chatbot-deployer user Loại bỏ bất kỳ custom policies đã tạo Xác minh Chi phí Sau cleanup, xác minh không có phí phát sinh:\nKiểm tra các Services này:\n✅ Lambda: Không còn functions nào ✅ API Gateway: Không còn APIs nào ✅ OpenSearch Serverless: Không còn collections hoặc policies ✅ S3: Không còn buckets với workshop data ✅ Secrets Manager: Không còn secrets nào ✅ Bedrock: Knowledge Base đã xóa (models vẫn enabled) Mẹo: Bedrock model access vẫn enabled nhưng không phát sinh phí trừ khi actively sử dụng. Bạn có thể để enabled cho các dự án tương lai.\nCleanup Checklist Xác nhận tất cả resources đã được xóa:\n✅ API Gateway đã xóa ✅ Lambda function đã xóa ✅ Bedrock Knowledge Base đã xóa ✅ OpenSearch collection và policies đã xóa ✅ Secrets Manager secrets đã xóa ✅ Parameter Store parameters đã xóa ✅ S3 bucket và contents đã xóa ✅ IAM roles và users đã xóa (tùy chọn) Xác minh Cuối cùng Kiểm tra AWS Billing Dashboard:\nXác minh không có unexpected charges Giám sát trong 24-48 giờ sau cleanup Review CloudWatch Logs:\nLog groups có thể còn lại nhưng không phát sinh chi phí đáng kể Xóa nếu muốn: /aws/lambda/BedrockKBSlackbotFunction5 Tóm tắt Workshop Chúc mừng bạn đã hoàn thành workshop Generative AI Slack Assistant! Bạn đã thành công:\n✅ Xây dựng AI assistant cấp enterprise ✅ Triển khai RAG architecture với Amazon Bedrock ✅ Cấu hình secure credential management ✅ Deploy serverless infrastructure ✅ Tích hợp với Slack cho real-world usage ✅ Dọn dẹp resources đúng cách Workshop Hoàn thành - Tất cả resources đã được dọn dẹp thành công!\n"
},
{
	"uri": "//localhost:1313/vi/10-conclusion/",
	"title": "Kết luận",
	"tags": [],
	"description": "",
	"content": "Kết luận Workshop Chúc mừng bạn đã hoàn thành thành công workshop Generative AI Slack Assistant với Amazon Bedrock Knowledge Bases! Bạn đã xây dựng một AI assistant sẵn sàng production biến đổi cách các tổ chức truy cập và sử dụng kiến thức thông qua natural language conversations.\nNhững gì bạn đã hoàn thành Trong suốt workshop toàn diện này, bạn đã:\n1. Xây dựng Enterprise Architecture\nDeploy giải pháp AI serverless hoàn chỉnh sử dụng AWS managed services Triển khai Retrieval-Augmented Generation (RAG) với Amazon Bedrock Knowledge Bases Tạo kiến trúc scalable, cost-effective xử lý varying workloads 2. Triển khai Enterprise Security\nCấu hình secure credential management với AWS Secrets Manager và Parameter Store Thiết lập content filtering và safety measures sử dụng Amazon Bedrock Guardrails Áp dụng least privilege access principles với IAM roles và policies 3. Phát triển Intelligent Capabilities\nTích hợp Claude 3 Sonnet cho advanced natural language understanding Sử dụng Amazon Titan Text Embeddings V2 cho semantic document search Tạo knowledge base hiểu context và cung cấp accurate responses 4. Đạt được Seamless Integration\nKết nối Slack với AWS services thông qua API Gateway và Lambda Xử lý asynchronous processing với proper acknowledgment patterns Cung cấp real-time responses cho users trong Slack environment quen thuộc Kỹ năng Kỹ thuật Chính đã có được Amazon Bedrock: Foundation model integration và Knowledge Base management OpenSearch Serverless: Vector database operations và semantic search AWS Lambda: Serverless function development và event-driven architecture API Gateway: RESTful API design và Slack webhook integration Security Management: Secrets handling và enterprise-grade access control Tác động Kinh doanh AI assistant của bạn mang lại business value có thể đo lường:\nCải thiện Năng suất: Truy cập tức thì đến organizational knowledge Giảm Support Load: Self-service capabilities cho common questions Tăng cường Hợp tác: Shared knowledge accessible cho tất cả team members Giải pháp Scalable: Phát triển cùng với nhu cầu tổ chức Điểm nổi bật Kiến trúc Giải pháp bạn đã xây dựng thể hiện modern cloud architecture principles:\nServerless-First: Không cần infrastructure management Event-Driven: Responsive với user interactions Secure by Design: Enterprise-grade security throughout Cost-Optimized: Pay-per-use pricing model Highly Available: Built-in redundancy và fault tolerance Cải tiến Tương lai Xem xét các bước tiếp theo để mở rộng AI assistant:\n1. Advanced Features\nMulti-language support cho global organizations Custom guardrails cho industry-specific content filtering Integration với additional data sources (databases, APIs, wikis) User personalization và conversation history 2. Production Optimization\nCI/CD pipeline cho automated deployments Advanced monitoring và alerting với CloudWatch Performance optimization và caching strategies Multi-region deployment cho global availability 3. Extended Integrations\nMicrosoft Teams và other collaboration platforms Voice interfaces với Amazon Alexa for Business Mobile applications với direct API access Integration với existing enterprise systems Learning Resources Tiếp tục AI và AWS journey với các resources này:\nAWS Documentation: Amazon Bedrock User Guide AWS Training: Machine Learning on AWS Community: AWS AI/ML Community Certification: AWS Certified Machine Learning - Specialty Suy nghĩ Cuối cùng Bạn đã thành công biến đổi static organizational knowledge thành intelligent, conversational assistant mà employees có thể tương tác naturally. Workshop này đã trang bị cho bạn skills để build, deploy và maintain enterprise-grade AI solutions sử dụng AWS managed services.\nTương lai của workplace productivity nằm ở việc làm cho information instantly accessible thông qua natural language interfaces. Bạn hiện đã chuẩn bị để lead transformation này trong tổ chức.\nCredits Workshop này được phát triển và maintain bởi:\nLe Hong Anh\nAI Solutions Architect\nLinkedIn Profile\nTran Doan Cong Ly\nCloud Solutions Engineer\nLinkedIn Profile\nReferences 1. AWS Documentation\nAmazon Bedrock Developer Guide Amazon Bedrock Knowledge Bases Amazon OpenSearch Serverless AWS Lambda Developer Guide Amazon API Gateway Developer Guide 2. Slack Development\nSlack Bolt for Python Slack API Documentation Slack App Development 3. AI and Machine Learning\nRetrieval-Augmented Generation (RAG) Overview Foundation Models on Amazon Bedrock Vector Databases and Semantic Search 4. Security Best Practices\nAWS Security Best Practices AWS Secrets Manager Best Practices IAM Best Practices 5. Blog Posts and Articles\nCreate a generative AI assistant with Slack and Amazon Bedrock Building RAG Applications with Amazon Bedrock Serverless AI Applications on AWS Cảm ơn bạn đã tham gia workshop này!\nChúng tôi hy vọng trải nghiệm này đã truyền cảm hứng cho bạn tiếp tục khám phá possibilities của generative AI và AWS cloud services. Feedback và success stories của bạn giúp chúng tôi cải thiện future workshops và support growing AI community.\nHappy building! 🚀\n"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]